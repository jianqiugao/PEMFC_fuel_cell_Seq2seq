import torch
import numpy as np
import pandas as pd

from mod.遗传算法 import GA
from mod.seq2seq_fuelcell import seq2seq_fuelcell
from mod.工具 import normal_data, unormal_data
from config import config
from 三角函数拟合 import plt

net = seq2seq_fuelcell()
net.load_state_dict(torch.load('mode.pt'))

前十秒的状态 = np.array(
    [[[0.132378208, 498.3820802, 0.065974927, 0.000374929, 20.35818197],
      [0.170700803, 496.5324424, 0.084758487, 0.000799201, 20.35827468],
      [0.222321497, 494.606599, 0.10996168, 0.001469043, 20.35839953],
      [0.305417228, 492.2853429, 0.150352425, 0.002727039, 20.35860091],
      [0.418370848, 489.9750039, 0.204991258, 0.004702159, 20.35887627],
      [0.557452854, 487.85643, 0.271956959, 0.007446353, 20.35921896],
      [0.738578799, 485.765195, 0.358775874, 0.011410364, 20.3596729],
      [0.991142597, 483.5584959, 0.479275423, 0.017499744, 20.36032302],
      [1.336658825, 481.2858846, 0.643315025, 0.026637729, 20.36124945],
      [1.791785325, 479.0208057, 0.85830245, 0.039766603, 20.36254287]]])

前十秒的状态 = 前十秒的状态.squeeze(0)
前十秒的状态[:,0] = np.array([normal_data(x, config['电流'][1], config['电流'][0]) for x in 前十秒的状态[:,0]])
前十秒的状态[:,1] = np.array([normal_data(x, config['电压'][1], config['电压'][0]) for x in 前十秒的状态[:,1]])
前十秒的状态[:,2] = np.array([normal_data(x, config['电功'][1], config['电功'][0]) for x in 前十秒的状态[:,2]])
前十秒的状态[:,3] = np.array([normal_data(x, config['热功'][1], config['热功'][0]) for x in 前十秒的状态[:,3]])
前十秒的状态[:,4] = np.array([normal_data(x, config['温度'][1], config['温度'][0]) for x in 前十秒的状态[:,4]])
前十秒的状态 = torch.Tensor(前十秒的状态).unsqueeze(0)



后十秒的操作 = \
    [[[2.392262151],
      [2.990853599],
      [3.516674398],
      [3.934677355],
      [4.353634186],
      [4.918585108],
      [5.940937534],
      [7.252879044],
      [8.645143344],
      [10.13874502],
      ]]

data = np.array(后十秒的操作).reshape(-1)
后十秒的操作 = torch.Tensor(np.array([normal_data(x, config['电流'][1], config['电流'][0]) for x in data])).reshape(-1, 10, 1)

预测的后十秒状态 = np.array(
    [[[476.7365939, 1.14047891, 0.058557497, 20.3643895],
     [474.9266861, 1.420436188, 0.078622727, 20.36635863],
     [473.5833126, 1.665438311, 0.097169566, 20.36813092],
     [472.6332138, 1.859659204, 0.112457777, 20.36963517],
     [471.7622138, 2.053880102, 0.128224083, 20.37123137],
     [470.6903144, 2.315130371, 0.150135354, 20.37352882],
     [468.9767178, 2.786161385, 0.191522108, 20.37815339],
     [467.0790091, 3.387667557, 0.247579923, 20.38498777],
     [465.3116861, 4.022686226, 0.31038418, 20.3934078],
     [463.585325, 4.700173404, 0.381511688, 20.40383915],
     ]])

预测的后十秒状态 = 预测的后十秒状态.squeeze(0)

预测的后十秒状态[:,0] = np.array([normal_data(x, config['电压'][1], config['电压'][0]) for x in 预测的后十秒状态[:,0]])
预测的后十秒状态[:,1] = np.array([normal_data(x, config['电功'][1], config['电功'][0]) for x in 预测的后十秒状态[:,1]])
预测的后十秒状态[:,2] = np.array([normal_data(x, config['热功'][1], config['热功'][0]) for x in 预测的后十秒状态[:,2]])
预测的后十秒状态[:,3] = np.array([normal_data(x, config['温度'][1], config['温度'][0]) for x in 预测的后十秒状态[:,3]])
预测的后十秒状态 = torch.Tensor(预测的后十秒状态).unsqueeze(0)

net.eval()

神经网络预测值 = net(前十秒的状态,后十秒的操作).detach().numpy()
预测的后十秒状态 = 预测的后十秒状态.detach().numpy()

fig,axe = plt.subplots(2,2)
axe[0,0].set_title('电压')
axe[0,0].plot(range(10),神经网络预测值[0,:,0])
axe[0,0].plot(range(10),预测的后十秒状态[0,:,0])
axe[0,0].legend(['预测值','真实值'])
axe[0,0].set_ylim([0,1])

axe[0,1].set_title('电功')
axe[0,1].plot(range(10),神经网络预测值[0,:,1])
axe[0,1].plot(range(10),预测的后十秒状态[0,:,1])
axe[0,1].legend(['预测值','真实值'])
axe[0,1].set_ylim([0,1])

axe[1,0].set_title('热功')
axe[1,0].plot(range(10),神经网络预测值[0,:,2])
axe[1,0].plot(range(10),预测的后十秒状态[0,:,2])
axe[1,0].legend(['预测值','真实值'])
axe[1,0].set_ylim([0,1])

axe[1,1].set_title('温度')
axe[1,1].plot(range(10),神经网络预测值[0,:,3])
axe[1,1].plot(range(10),预测的后十秒状态[0,:,3])
axe[1,1].legend(['预测值','真实值'])
axe[1,1].set_ylim([0,1])

plt.show()

